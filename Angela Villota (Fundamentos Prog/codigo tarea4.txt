;punto 1.1

;contrato:
;convertir_a_dolar: lista numero -> lista

;proposito: convertir los precios en pesos que se encuentran en una lista a dolares.

;ejemplos:
;(convertir_a_dolar (list 1800 3600 5400) 1800) debe retornar (list 1 2 3) 
;(convertir_a_dolar (list 12600 19800 36000 27000 180000 158400) 1800) debe retornar (list 7 11 20 15 100 88)
;(convertir_a_dolar (list 61200 660600) 1800) debe retornar (list 34 367)

;analisis de los datos:
;                      hay 3 codigos de covertir_a_dolar
;                      si la lista esta vacia entonces devuelva empty.
;                      si el resto de la lista esta vacia entonces construir el primero de la lista convertido a dolar.
;                      sino construir el primero de la lista convertido a dolar y la recursividad del resto de la lista. 


;programa:

(define (convertir_a_dolar lista tcamb)
  (cond
    [(empty? lista) empty]
    [(empty? (rest lista)) (cons (/ (first lista) tcamb) empty)]
    [else (cons (/ (first lista) tcamb) (convertir_a_dolar (rest lista) tcamb))]
    )
  )

;pruebas:
(convertir_a_dolar (list 1000 1400 10000) 1800)
(convertir_a_dolar (list 100 200 500 800) 1800)
(convertir_a_dolar (list 1000000000000 3800000000000) 1800)


;punto 1.2

;contrato:
;quitar-caro: lista numero -> lista

;proposito: sacar de una lista de precios y devolver en una lista los precios menores o iguales a el limite o tope.

;ejemplos:
;(quitar-caro (list 1 2 3 4 5 6 7 89 9) 6) debe retornar (list 1 2 3 4 5 6)
;(quitar-caro (list 3  454 66 787 86 8) 15) debe retornar (list 3 8)
;(quitar-caro (list 100 150 200 250 300 350 400 425) 398) debe retornar (list 100 150 200 250 300 350)

;analisis de los datos:
;                      existen 3 codigos de quitar-caro
;                      si la lista esta vacia entonces debe devolver empty.
;                      si el primer elemento de la lista es menor o igual al limite entonces que construya una lista con el primer elemento y la recursividad del resto.
;                      sino la recursividad del resto de la lista.


;programa:

(define (quitar-caro lista1 limite)
  (cond
    [(empty? lista1) empty]
    [(<= (first lista1) limite)  (cons (first lista1) (quitar-caro  (rest lista1) limite))]
    [else (quitar-caro (rest lista1) limite)]
    )
  )


;pruebas:
(quitar-caro (list 12 5 42 673 14 5 0.5 56 7 89 9) 15)
(quitar-caro (list 35  454 66 787 86 8) 21)
(quitar-caro (list 100 95 20 250 12 35 400 425) 121)


;punto 1.3

;contrato:
;sustituir: simbolo simbolo lista -> lista

;proposito: buscar si el primer simbolo se encuentra dentro de la lista si si esta entonces sustituir ese elemento por el segundo simbolo, devolviendo la lista con la sustitución.

;analisis de los datos:
;                      existen 3 codigos de sustituir
;                      si la lista esta vacia devuelva empty.
;                      si el simbolo del primer elemento de la lista es igual al simbolo1 entonces construir una lista con el simbolo2 y el resto de la lista.
;                      sino construir una lista con el primer elemento de la lista y la recursividad del resto de la lista.


;ejemplos:
;(sustituir 'doll 'Barbie (list 'robot 'doll 'dress)) debe retornar (list 'robot 'Barbie 'dress)
;(sustituir 'carro 'moto (list 'muñeco 'espada 'carro)) debe retornar (list 'muñeco 'espada 'moto)
;(sustituir 'perro 'gato (list 'gallina 'raton 'leon)) deber retornar (list 'gallina 'raton 'leon)

;programa:

(define (sustituir simbolo1 simbolo2 lista2)
  (cond
    [(empty? lista2) empty]
    [(symbol=? (first lista2) simbolo1) (cons simbolo2 (rest lista2))]
    [else (cons (first lista2) (sustituir simbolo1 simbolo2 (rest lista2)))]
    )
  )

;pruebas:
(sustituir 'avion 'barco (list 'avion 'gato 'perro))
(sustituir 'gorra 'sombrero (list 'cachucha 'pañoleta 'gorra 'mascara 'anillo))
(sustituir 'señor 'señora (list 'niño 'niña 'señor 'anciano))


;punto 1.4

;contrato:
;n-circulos: estructura numero -> booleno

;proposito: pinta n circulos en el lienzo.

;analisis de los datos:

;ejemplos:

;programa:

;(define (n-circulos estrucirculo n)

;pruebas:




;definición estructura circulo



;funcion auxiliar pintar-circulo


;punto 2.1

;contrato: longitud: lista -> numero

;proposito: calcular la longitud de una lista dada

;analisis de los datos:
;                      existen 3 codigos de longitud:
;                      si la lista esta vacia entonces debe devolver 0.
;                      si el resto de la lista esta vacia entonces que devuelva 1.
;                      sino sumarle 1 a la recursividad del resto de la lista.

;ejemplos:
;(longitud (list 'perro 'gato 'cerdo 'vaca 'caballo 'pato)) debe devolver 6
;(longitud (list 'casa 'apartamento 'hotel)) debe devolver 3
;(longitud (list 23 4 5 5 7 8 234)) debe devolver 7

;programa:

(define (longitud listA)
  (cond
    [(empty? listA) 0]
    [(empty? (rest listA)) 1]
    [else (+ (longitud (rest listA)) 1)]
    )
  )

;pruebas:
(longitud (list 'carro 'moto 'bus))
(longitud (list 'teclado 'mouse 02 34 "matematicas"))
(longitud (list 'futbol 'baloncesto 'tennis 'natacion))


;punto 2.2

;contrato: 
;elemento?: elemento lista -> booleano

;proposito: muestra si un elemento dado se encuentra dentro de una lista.

;analisis de los datos:
;                      existen 



;ejemplos;
;(elemento? 2 (list 3 5 7 'carro 6 2)) retornara true.
;(elemento? 'perro (list 2 4 6 7 9)) retornara false.
;(elemento? 'gato (list 'gallina 'pato 'perro 'gato 'toro)) retornara true.

;programa:

(define (elemento? e l)
  (cond
    [(empty? l) false]
    [(number? e) (aux-number e l)]
    [(symbol? e) (aux-symbol e l)]
    [(string? e) (aux-string e l)]
    [else (elemento? e (rest l))]
    )
  )


(define (aux-number elem listt)
  (cond
    [(empty? listt) false]
    [(= (first listt) elem) true]
    [else (aux-number elem (rest listt))]
    )
  )

(define (aux-symbol element liste)
  (cond
    [(empty? liste) false]
    [(symbol=? (first liste) element) true]
    [else (aux-symbol element (rest liste))]
    )
  )

(define (aux-string elemento listi)
  (cond
    [(empty? listi) false]
    [(string=? (first listi) elemento) true]
    [else (aux-string elemento (rest listi))]
    )
  )
  
;pruebas:
(elemento? 1 (list 2 3))
(elemento? 'raul (list 'diego 'daniel 'cristina 'angela))
(elemento? "raton" (list "perro" "gato" "rata" "raton" "cucaracha"))

;punto 2.3

;contrato:
;elemento-n: lista numero -> numero

;proposito: mostrar el n-esimo elemento de una lista.

;analisis de los datos:
;                      existen 3 codigos de elemento-n:
;                      si la lista esta vacia debe devolver 0.
;                      si n-esimo es igual a 1 debe devolver el primer elemento de la lista.
;                      sino, la recursividad del resto de la lista, restando de uno en uno el n-esimo.


;ejemplos:
;(elemento-n (list 2 0 4 5) 3) debe retornar 4.
;(elemento-n (list 'perro 'gato 'conejo) 3) debe retornar 'conejo.
;(elemento-n (list "computador" "mouse" "impresora" "teclado") 2) debe retornar "mouse".

(define (elemento-n listado n-esimo)
  (cond
    [(empty? listado) 0]
    [(= n-esimo 1) (first listado)]
    [else (elemento-n (rest listado) (- n-esimo 1))]
    )
  )

;pruebas:
(elemento-n (list 'frijoles "arroz" 4 2 'papa "platano") 6)
(elemento-n (list 'sergio 'felipe 'patricia 'tatiana 'roberto 'gustavo 'manuel 'moises 'julian) 7)
(elemento-n (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30) 23)


;punto 2.4

;contrato:
;insertar-primero: elemento lista -> lista

;proposito: debe insertar un elemento cualquiera en la primera posicion de la lista.

;analisis de los datos:
;                      existen 3 codigos de insertar-primero:
;                      si la lista esta vacia entonces construya una lista donde el elemento va a ser la cabeza de la lista.
;                      si el resto de la lista esta vacia entonces construir una lista donde el primer elemento de la lista sea el elemento a insertar y el resto de la lista sea el primer elemento de la lista.
;                      sino, construir una lista donde el primer elemento de la lista sea el elemento a insertar y el resto de la lista sea la lista.

;ejemplos:
;(insertar-primero 'carro (list 'moto 3 4)) retorna (list 'carro 'moto 3 4)
;(insertar-primero 1 (list 2 3 4 5 6)) retorna (list 1 2 3 4 5 6)
;(insertar-primero "sergio" (list "ortiz" "paz")) retornara (list "sergio" "ortiz" "paz")

;programa:

(define (insertar-primero elemen lest)
  (cond
    [(empty? lest) (cons elemen empty)]
    [(empty? (rest lest)) (cons elemen (cons (first lest) empty))]
    [else (cons elemen lest)]
    )
  )

;pruebas:
(insertar-primero "salud" (list "dinero" "y" "amor"))
(insertar-primero 'estirar (list 2 'calentar 3 'ejercitar 4 "de nuevo" 'estirar))
(insertar-primero 'cd (list 'monitor 'cpu 'mouse 'parlantes))


;punto 2.5

;contrato:
;insertar-en-n: elemento lista numero -> lista

;proposito: insertar un elemento en una posicion determinada en una lista.

;analisis de los datos:
;                      existen 3 codigos de la funcion:
;                      si la lista esta vacia entonces devuelva empty.
;                      si n es igual a 1 entonces construya una lista con el objeto a insertar y la lista_1 como resto de la lista.
;                      sino, construir una lista con el primer elemento de la lista_1 y la recursividad del resto de la lista_1, restando 1 a n.


;ejemplos:
;(insertar-en-n 'perro (list 'gato 'sapo) 2) retorna (list 'gato 'perro 'sapo)
;(insertar-en-n 4 (list 23 'zorro 'software "hola mundo") 3) retorna (list 23 'zorro 4 'software "hola mundo")
;(insertar-en-n "felipe" (list "carlos" "recalde") 2) retorna (list "carlos" "felipe" "recalde")


;programa:

(define (insertar-en-n objeto lista_1 n)
  (cond
    [(empty? lista_1) empty]
    [(= n 1) (cons objeto lista_1)]
    [else (cons (first lista_1) (insertar-en-n objeto (rest lista_1) (- n 1)))]
    )
  )


;pruebas:
(insertar-en-n 'chevrolet (list 'toyota 'mazda 'mitsubishi 'peageot "Mercedez Benz") 3)
(insertar-en-n "just do it," (list "if you wanna it," "you get a power")2)
(insertar-en-n 'de (list 'fundamentos 'programacion)2)


;punto 2.6

;contrato:
;insertar-ultimo: elemento lista -> lista

;proposito: insertar un elemento dado en la ultima posicion de una lista.

;analisis de los datos:


;ejemplos:
;(insertar-ultimo "brush your teeth" (list "wake up" "get up" "take a shower")) retorna (list "wake up" "get up" "take a shower" "brush your teeth")


;programa:

(define (insertar-ultimo Objeto lista_2)
  (cond
    [(empty? lista_2) empty]
    [(empty? (rest lista_2)) (cons (first lista_2) (cons Objeto empty))]
    [else (cons (first lista_2) (insertar-ultimo Objeto (rest lista_2)))]
    )
  )

;pruebas:
(insertar-ultimo 'gato (list 'raton))
(insertar-ultimo 'monitor (list 'teclado 'raton 'parlantes 'cpu))
(insertar-ultimo 10 (list 1 2 3 4 5 6 7 8 9))


;punto 2.7

;contrato:
;inversa: lista -> lista

;proposito: volver inversa o voltear una lista.

;analisis de los datos:


;ejemplos:
;(inversa (list 3 2 1)) debe retornar (list 1 2 3)
;(inversa (list 'r 'e 't)) debe retornar (list 't 'e 'r)
;(inversa (list "hola" "mundo")) debe retornar (list "mundo" "hola")

;programa:

(define (inversa listado_1)
  (cond
    [(empty? listado_1) empty]
    [(empty? (rest listado_1)) (cons (first listado_1) empty)]
    [else (cons (inversa (rest listado_1)) (cons (first listado_1) empty))]
    )
  )

(inversa (list 1 2 3 4))


;punto 2.8

;contrato:
;concatenar: lista lista -> lista 

;proposito: concatenar dos listas,la primera dentro de la otra.

;analisis de los datos:
;

;ejemplos:
;(concatenar (list 3 6 7) (list 65 78 89)) debe retornar (list 3 6 7 65 78 89)
;(concatenar (list "perro" "gato") (list 'toro 'gallina)) debe retornar (list "perro" "gato" 'toro 'gallina)
;(concatenar (list 23 35 56) (list 45 67 8)) debe retornar (list 23 35 56 45 67 8)

;programa:

;(define (concatenar lista01 lista02)
;  (cond
;    [(and (empty? lista01) (empty? lista02)) empty]
;    [(empty? lista02) lista01]
;    [(empty? lista01) lista02]
;    [(empty? (rest lista02)) (cons lista01 (cons (first lista01) empty))]
;    [(]

(define gogo (list 3 4 5 6))


























































